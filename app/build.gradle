plugins {
  id 'com.android.application'
  id 'kotlin-android'
  id 'jacoco'
}

android {
  compileSdkVersion 30
  buildToolsVersion "30.0.3"

  defaultConfig {
    applicationId "sylvester.chen.wan"
    minSdkVersion 21
    targetSdkVersion 30
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debug {
      testCoverageEnabled true
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }
}

jacoco {
  toolVersion = "0.8.5"
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
  jacoco.excludes = ['jdk.internal.*']
}

// Files with such regex patterns are to be excluded
def fileFilter = [
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    'android/**/*.*'
]

// Location of generated output classes
def debugTree = fileTree(
    dir: "$project.buildDir/tmp/kotlin-classes/debug",
    excludes: fileFilter
)

// Source code directory
def mainSrc = "$project.projectDir/src/main/java"

// Task declaration
task jacocoTestReport(type: JacocoReport) {
  // Runs only after the dependencies are executed
  dependsOn = ['testDebugUnitTest', 'createDebugCoverageReport']
  // Export formats
  reports {
    xml.enabled = true
    html.enabled = true
  }

  sourceDirectories.setFrom(files([mainSrc]))
  classDirectories.setFrom(files([debugTree]))

  // Inform Gradle where the files generated by test cases - are located
  executionData.from = fileTree(dir: project.buildDir, includes: [
      'jacoco/testDebugUnitTest.exec',
      'outputs/code_coverage/debugAndroidTest/connected/*.ec'
  ])
}

// Task declaration
task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
  // Run only after the test reports are generated
  dependsOn = ['jacocoTestReport']
  enabled = true
  sourceDirectories.from = files([mainSrc])
  classDirectories.from = files([debugTree])
  executionData.from = fileTree(dir: project.buildDir, includes: [
      'jacoco/testDebugUnitTest.exec',
      'outputs/code_coverage/debugAndroidTest/connected/*.ec'
  ])

  violationRules {
    failOnViolation = true
    // 1
    rule {
      enabled = true
      element = 'PACKAGE'
      includes = ['sylvester.chen.wan']
      limit {
        counter = 'CLASS'
        value = 'MISSEDCOUNT'
        maximum = 0
      }
    }
    // 2
    rule {
      element = 'PACKAGE'
      includes = ['sylvester.chen.wan.server']
      limit {
        value = 'COVEREDRATIO'
        counter = 'INSTRUCTION'
        minimum = 0.8
      }
    }
  }
}
// Make the check gradle task depend on the above task so that failure of above task will fail the check task
check.dependsOn jacocoTestCoverageVerification

dependencies {
  def retrofit_version = '2.9.0'
  def okhttp_version = '3.14.9'
  def coroutine_version = '1.4.3'

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
  implementation 'androidx.core:core-ktx:1.3.2'
  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'com.google.android.material:material:1.3.0'
  implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
  implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

  testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
  testImplementation "com.squareup.okhttp3:okhttp-testing-support:$okhttp_version"
  testImplementation "com.squareup.retrofit2:retrofit-mock:$retrofit_version"
  testImplementation 'junit:junit:4.13.2'
  androidTestImplementation 'androidx.test.ext:junit:1.1.2'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
